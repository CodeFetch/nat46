ABOUT AND USAGE
---------------

This is a heavily modified fork of the stateless NAT46 kernel module for Linux.
* CERNET MAP implementation

  https://github.com/cernet/MAP

Instead of using the source address of IPv4 packets for translation,
this module uses the MAC address. For translating the destination address of
IPv6 packets it uses either a fixed IPv4 address or a range 
to which the MAC is being translated using the SDBM hashing algorithm.

The development purpose of this module was to allow IPv4 (roaming) in IPv6-only 
babel mesh networks using l3roamd.

The implementation of the SDBM hashing algorithm is compatible to the one
used by dnsmasq. Thus dnsmasq with the hashing option enabled can be used to
assign addresses to clients which can then use the NAT26 module.

This module creates two interfaces. One which should be used e.g. in a bridge
to allow L2 flow and one PtP interface which should be used with static routing.

It supports multiple simultaneous instances of NAT26 on the same host,
allowing to implement sophisticated translation strategies just 
by using routing and bridging to direct the packets to the appropriate interface.

Upon loading, it creates a file /proc/net/nat26/control, which is used 
to interact with it.

echo add <ifname2> <ifname6> | sudo tee /proc/net/nat26/control
	creates ifname2 for use with IPv4 bridging 
	and ifname6 for use with IPv6 routing

echo del <ifname2/ifname6> | sudo tee /proc/net/nat26/control
	(enter either the name of ifname2 or ifname6)
	delete the existing nat26 interface pair

echo config <ifname2/ifname6> <cfg-strings> | sudo tee /proc/net/nat26/control
	(enter either the name of ifname2 or ifname6)
	pass the <cfg-strings> data to configuration routine of
	the respective nat26 interface. In case multiple rules are
	present - this command controls the very last one in the ruleset.

echo insert <ifname2/ifname6> <cfg-strings> | sudo tee /proc/net/nat26/control
	(enter either the name of ifname2 or ifname6)
	insert a new rule with the specified config string at the head
	of the rule set for the device.

CONFIGURING NAT26 DEVICE
-----------------------

Configuration parameters for the device take form of "name value" pairs,
with the following values:

debug <level>
	set the debug level on the device to <level>

local.<param> <value>
	set the local side translation rule's parameter <param> to <value>

remote.<param> <value>
	set the remote side tranlation rule's parameter <param> to <value>


The rules for local and remote addresses are using the same mechanism for translation
for greater flexibility and allow several arguments. The most important argument is 
"style", which determines what kind of the translation mechanism is employed for 
this rule:

<rule>.style NONE
	this is a very simplistic style: it always fails, unless you configure 
	a /32 IPv4 prefix and a /128 IPv6 prefix - at which point it starts to 
	function as a single 1:1 translation rule.

	<rule>.v4 <v4addr>/32
	<rule>.v6 <v6addr>/128
		both of these parameters must be set for this translation style
		to function properly. They define the two addresses for 
		the 1:1 mapping.

	<rule>.ea-len
	<rule>.psid-offset
	<rule>.fmr-flag
		ignored in this translation style

	NB: in the future this translation mechanism may be extended to allow 1:1
	subnet mapping.

<rule>.style RFC6052
	this is a rule which allows to implement the mapping used in NAT64
	environments to represent the entire IPv4 internet as an IPv6 prefix.

	<rule>.v6 <v6pref>/<v6prefixlen>
		this defines IPv6 prefix length to translate the IPv4 internet into.
		The allowed prefix lengths are 32, 40, 48, 56, 64, 96.
		If a disallowed length is used, the translation fails.

	<rule>.v4 <v4pref>/<v4prefixlen>
		this parameter is ignored for now in this translation style. 
		For backwards compatibility it should be 0.0.0.0/0

	<rule>.ea-len
	<rule>.psid-offset
	<rule>.fmr-flag
		ignored in this translation style



CODE STRUCTURE
--------------

There are several groups of files:

nat26-module.*
	These files deal with the overall Linux module handling: loading / unloading,
	creating and destroying the /proc control file, as well as parsing the commands
	to pass on to the netdev portion of the code.

nat26-netdev.*
	Network device management code. This module accepts the high-level commands and
	performs the device-level work: locating the devices in the chain, grouping
	the functions into the device structures, etc. This module adds the pointers 
	the processing functions which are defined in the core group.

nat26-core.*
	Core processing routines. These do not do any netdevice/module work, they use 
	primarily sk_buff and nat64_instance_t data structures in order to operate.
	They use the Linux kernel and glue functions.

nat26-glue.*
	These are the "adaptation" functions, over time it is expected there will
	be almost nothing. The reason for the "glue" code to exist is to share
	the core code with userland implementations.




